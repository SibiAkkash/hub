# Generated by Django 4.2.2 on 2024-01-24 12:39

from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps


def create_field_objects(apps: StateApps) -> None:
    Tournament = apps.get_model("server", "Tournament")  # noqa: N806
    Match = apps.get_model("server", "Match")  # noqa: N806
    TournamentField = apps.get_model("server", "TournamentField")  # noqa: N806

    for tournament in Tournament.objects.all():
        matches = Match.objects.filter(tournament=tournament)
        tournament_fields_names = matches.values_list("field", flat=True).distinct()

        for tournament_field_name in tournament_fields_names:
            if tournament_field_name is None:
                continue
            field = TournamentField(
                name=tournament_field_name, is_broadcasted=False, tournament=tournament
            )
            field.save()


def delete_field_objects(apps: StateApps) -> None:
    TournamentField = apps.get_model("server", "TournamentField")  # noqa: N806
    TournamentField.objects.all().delete()


def add_field_references(apps: StateApps) -> None:
    Match = apps.get_model("server", "Match")  # noqa: N806
    TournamentField = apps.get_model("server", "TournamentField")  # noqa: N806

    matches = Match.objects.all()
    for match in matches:
        if match.field is None:
            match.field_reference = None
            continue

        match.field_reference = TournamentField.objects.get(
            name=match.field, tournament=match.tournament
        )

    Match.objects.bulk_update(matches, (["field_reference"]))


def remove_field_references(apps: StateApps) -> None:
    Match = apps.get_model("server", "Match")  # noqa: N806
    matches = Match.objects.all()

    for match in matches:
        match.field_reference = None

    Match.objects.bulk_update(matches, (["field_reference"]))


def create_fields_and_references(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    create_field_objects(apps)
    add_field_references(apps)


def remove_fields_and_references(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    delete_field_objects(apps)
    remove_field_references(apps)


class Migration(migrations.Migration):
    dependencies = [
        ("server", "0054_tournament_field"),
    ]

    operations = [
        migrations.RunPython(
            code=create_fields_and_references, reverse_code=remove_fields_and_references
        )
    ]
